1. 데이터 정의 언어 - ( DDL : Data Definition Language )
테이블이나 관계의 구조를 생성하는데 사용하며 CREATE, ALTER, DROP,TRUNCATE 문 등이 있다.
 - CREATE : 데이터베이스, 테이블등을 생성
 - ALTER : 테이블을 수정
 - DROP :  데이터베이스, 테이블을 삭제
 - RENAME : 테이블 이름 변경
 - TRUNCATE : 테이블을 초기화

2. 데이터 조작 언어 - ( DML : Data Manipulation Language ) 
테이블에 데이터 검색, 삽입, 수정, 삭제하는 데 사용하며 SELECT, UPDATE, DELETE, INSERT문 등이 있다.
 - INSERT - 데이터베이스에서 데이터를 등록(삽입).
 - UPDATE - 데이터베이스의 데이터를 업데이트.
 - DELETE - 데이터베이스의 데이터를 삭제.
 - SELECT - 데이터베이스에서 데이터를 검색.


3. 데이터 제어 언어 - ( DCL : Data Control Language)
데이터의 사용 권한을 관리하는 데 사용하며 GRANT, REVOKE 문 등이 있다.
 - GRANT : 특정 데이터베이스 사용자에게 특정 작업에 대한 수행 권한을 부여한다.
 - REVOKE : 특정 데이터베이스 사용자에게 특정 작업에 대한 수행 권한을 박탈 or 회수 한다.

4. TCL(TRANSACTION CONTROL LANGUAGE) 테이블 제어
 - COMMIT : 제어하고, 
 - ROLLBACK : 돌아가고 , 
 - SAVEPOINT : 특정저장 위치지정 

NULL과의 모든 비교(IS NULL 제외 )는 알수없음을 반환한다.
A = 10
A = null X ->  NULL과의 비교는 성립이 안된다.
A IS NULL 
A IS NOT NULL 이런식으로 표시한다.
정렬 시 오라클에서는 NULL은 가장 큰 값이다. 모르는 값이지만 출력시 제일 큰 값으로 측정된다.
'' = NULL과 같다.
NULL에 +-x/ 를 하면 NULL이 나온다.
COALESCE : 널이 아닌값을 찾아준다.
IN -> NULL은 제외
COUNT() NULL제외하고 카운트

*참조 무결성 = 외래키

ON DELETE CASCADE 같이 삭제가 된다.

VARCHAR2(1) 1byte AB여서 안됨.
DELETE *FROM -> 사용 X
DELETE(DML) 데이터 삭제, 로그O   TRUNCATE(DDL) 테이블 초기화, 로그X   DROP(DDL) 테이블 삭제, 로그O

트랜잭션 : 작업을 처리하는 단위 원자성, 일관성, 고립성, 지속성
원자성 : 트랜잭션에서 정의된 연산들은 모두 성공적으로 실행되던지 아니면 전혀 실행되지 않은 상태로 남아 있어야 한다. 
지속성 : 트랜잭션이 성공적으로 수행되면 그 트랜잭션이 갱신한 데이터베이스의 내용은 영구적으로 저장된다.
고립성 : 트랜잭션이 실행되는 도중에 다른 트랜잭션의 영향을 받아 잘못된 결과를 만들어서는 안 된다. 
일관성 : 트랜잭션이 실행되기 전의 데이터베이스 내용이 잘못 되어 있지 않다면 트랜잭션이 실행된 이후에도 데이터베이스의 내용에 잘못이 있으면 안 된다.

*모델링 추상화, 단순화, 명확화(정확화)
모델링  -> 중복X/유연성/일관성 

ERD -> 피터첸(Peter Chen), 도출→엔터티 배치→관계설정→관계명

엔터티 -> 집합 - 2개 이상의 속성(이름,주소), 2개 이상의 인스턴스(이름, 주소 연락처 ......)
최소 1개와 관계를 가짐						  a     b      c

가장 중요한 엔터티를 좌측 상단에 배치하고 
추가 발생되는 엔터티들을 우측 편과 하단에 배치하
는 것이 원칙

속성 (최소의 데이터 단위)
속성은 하나의 속성값을 가질 수 있다.
도메인(속성이 가질수 있는 값의 범위)
원래 속성의 값을 계산하여 저장할 수 있도록 만든 속성(파생속성)

관계는 존재적 관계와 행위에 의한 관계로 나누어볼 수 있다.
관계의 표기법은 관계명, 관계차수, 선택성
1:1, 1:M ,M:M -> 관계차수

**데이터 모델링의 순서 암기 무조건 나옴
정규화 ->  용량산정 -> 트랜잭션의 유형 ->  용량과 트랜잭션의 유형에 따라 반정규화 ->  이력모델의 조정, PK/FK조정, 슈퍼타입/서
 브타입 조정 -> 성능관점에서 데이터 모델 검증

정규화는 항상 조회 성능저하 상관없음.
반정규화 -> 중복 된 데이터 제거

집중화된 칼럼 디스크 I/O를 줄이기 위해
칼럼들을 별도로 모아놓는 반정규화

반정규화 나누기도 하지만 붙일 수도 있다.

FK관계 조인성능은 관계없다.

EXCEPT = MINUS

순방향= 부모->자식, 역방향 = 자식->부모  PRIOR(부모) C1(자녀)=C2(부모) 순방향  SIBLINGS = 조건에 맞춰줌

root 뿌리 <- 부모 1부터 시작
leap      <- 자식

SELF JOIN 두 테이블 볼 필요 없음, 연간된 컬럼X

IN, ALL 은 다중 행 비교 연산자
다중 행 -> 단일 행 가능
주로 메인쿼리는 연관 서브쿼리에서 읽혀진 데이터에 대해 서브쿼리에서 
해당 조건이 만족하는지를 확인하는 방식으로 수행된다.

ROLLUP(A) -> A 속에
ROLLUP(A,B) A속에 A,B
CUBE(A) = ROLLUP(A)
CUBE(A,B) = ROLLUP + B
GROUPING SETS(A) -> A만
ROLLUP만 컬럼순서 상관있음.

* 뷰는 보안을 강화하기 위한 목적으로도 활용

윈도우 함수는 처리로 인해 결과 건수랑은 상관 없다.

동일 SQL문에 대해 실행계획이 다르면 실행 결과도 달라질 수 없다.

인덱스는 조회, 삽입, 삭제, 갱신 연산의 속도를 향상시킨다.
대량의 데이터를 삽입할 때는 데이터를 입력하고 인덱스를 생성하는 
것이 좋다.

다양한 JOIN 기법 중 HASH 
JOIN, SORT MERGE JOIN 은 DW(DATA WAREHOUSE, 분석용 데이터베
이스) 등에서 데이터를 집계하는 업무에 많이 사용된다.

인덱스 = NESTED LOOP JOIN(NL JOIN)

**ERD    + 필수  o선택

카텐시안 곱 : From절에 2개 이상의 Table이 있을때 두 Table 사이에 유효 join 조건을 적지 않았을때 
해당 테이블에 대한 모든 데이터를 전부 결합하여 Table에 존재하는 행 갯수를 곱한 만큼의 결과값이 
반환되는 것이다.

NVL(A, B) -> A가 NULL이 아니면 A, A가 NULL이면 B
NVL2(A,B,C) -> A가 NULL이 아니면 B, A가 NULL이면 C
COALESCE -> NULL이 나올때까지 찾는다.

DECODE(A, B, C ,D)
A=B -> C
A!B -> D
NULLIF (A , A) -> 같으면 NULL

UNBOUNDED PRECEDING -> 처음부터 끝까지

WINDOW FUNCTION -> GROUP BY 상관 X

"-" ESCAPE 가 들어가야 한다. '@'

= 단수 연산자

다른 컬럼끼리는 UNION ALL 이 불가능

NATURAL JOIN 은 공통 컬럼을 자동으로 찾아줌
CROSS JOIN은 전체

NTILE(3) -> 3칸으로 나눈다.

E-R 모델 (E-R Model)
데이터를 개체(Entity), 속성(Attribute), 관계성(Relationship)으로 나타내는 데이터 모델이다.

릴레이션(relation)은 주로 테이블(Table)과 같은 의미로 사용되며, 데이터의 집합을 의미한다. 튜플(tuple)과 속성(attribute)로 구성되어 있다.

차수(degree) : 한 릴레이션에 들어 있는 애트리뷰트의 수를 나타내며, 유효한 릴레이션의 최소 차수는 1이다.

인스턴스는 릴레이션 스키마에 실제로 저장된 데이터의 집합이다.

카디날리티(cardinality) : 릴레이션 튜플의 개수로 차수와 다르게 유효릴레이션은 카디날리티 0을 가질 수 있다.

EQUI JOIN 은 조인 조건식에 '='를 사용한다.

분산 데이터 베이스 -> 물류센터

ROWNUM = 1 은 1이 포함.
ROWNUM = 2 는 안됨.

DECODE(Gender, 0, '남자', 1, '여자')

1정규화 - 원자성, 기본키(PK)설정
2정규화 - 기본키가 2개 이상의 속성일때 부분함수 종속성을 제거
3정규화 - 이행함수(안쪽의 관계) 종속성, 기본키를 제외한 컬럼간의 종속성
5정규화 - JOIN에 의해서 종속성이 발생되는 경우

대체여부 = 본질식별자

CREATE INDEX 인덱스명 ON 테이블명 (컬럼명);

MINUS 는 중복 제거

정렬 = SMJ(Sort Merge Join)

Rank 함수에는 ORDER BY 필수

SIBLINGS BY 형제 테이블

메인 쿼리에서는 서브쿼리 사용 X
서브에서는 메인 O

RANDOM ACCESS -> NLJ(Nested Loop Join)

권한을 묶어서 한꺼번에 부여 = ROLE

CREATE, TRUNCATE -> AUTO COMMIT

점선 : 비식별자
선 : 식별자
o 선택
줄 : 1:M, 1 대 다
