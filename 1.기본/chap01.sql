-- EXAM1_5 -> 답과 조금 다름
SELECT * FROM EXAM1_5;
SELECT DISTINCT 거주지, 근무지 FROM EXAM1_5;

-- EXAM2_2
SELECT * FROM EXAM2_2;
SELECT COL1+COL3 FROM EXAM2_2;

-- EXAM2_4
SELECT * FROM EXAM2_4;
-- ①
SELECT COL2 FROM EXAM2_4 WHERE COL1 = 'b'; -- NULL
-- ②
SELECT ISNULL(COL2, 'X') AS abc FROM EXAM2_4 WHERE COL1 = 'a'; -- MSSQL에서만 사용
SELECT NVL(COL2, 'X') AS abc FROM EXAM2_4 WHERE COL1 = 'a'; -- 수치 부적합
SELECT NVL(COL2, 0) AS abc FROM EXAM2_4 WHERE COL1 = 'a';
-- ③
SELECT COUNT(COL1) FROM EXAM2_4 WHERE COL2 = NULL; -- 0
-- ④
SELECT COUNT(COL2) FROM EXAM2_4 WHERE COL1 IN('b','c');

-- EXAM2_5
SELECT * FROM EMP;
SELECT ENAME, EMPNO, MGR, NULL IF(MGR, 7698) AS NM FROM EMP; -- ?
SELECT ENAME, EMPNO, MGR, NVL(MGR, 7698) AS NM FROM EMP;
SELECT ENAME, EMPNO, MGR, NVL2(MGR, 7698) AS NM FROM EMP; -- 인수의 개수가 부적합

-- EXAM2_6
-- ①
SELECT SAL/COMM FROM EXAM2_6 WHERE ENAME='KING'; -- 0
-- ②
SELECT SAL/COMM FROM EXAM2_6 WHERE ENAME='FORD'; -- ERROR
-- ③
SELECT SAL/COMM FROM EXAM2_6 WHERE ENAME='SCOTT'; -- NULL

-- EXAM3_1
SELECT COUNT(*)FROM EXAM3_1 WHERE EMPNO>100 AND SAL>=3000 OR EMPNO=200; -- 1

-- EXAM3_2
SELECT * FROM EXAM3_2;
-- ①
SELECT SUM(매출금액) AS 매출금액합계 FROM EXAM3_2 WHERE 년 BETWEEN '2014' AND '2015' AND 월 BETWEEN '03' AND '12'; -- 39000
-- ②
-- SELECT SUM(매출금액) AS 매출금액합계 FROM EXAM3_2 WHERE 년 IN ('2014', '2015') AND 월 IN ('11', '12', '03, '04', '05'); -- 실행 X
-- ③ 
SELECT SUM(매출금액) AS 매출금액합계 FROM EXAM3_2 WHERE (년='2014' OR 년='2015') AND (월 BETWEEN '01' AND '03' OR  월 BETWEEN '11' AND '12'); -- 55000
-- ④
SELECT SUM(매출금액) AS 매출금액합계 FROM EXAM3_2 WHERE 년='2014' AND 월 BETWEEN '11' AND '12' OR 년='2015' AND 월 BETWEEN '01' AND '03'; -- 30000

-- EXAM3_3
SELECT * FROM EXAM3_3;
SELECT SUM(COALESCE(C1, C2, C3)) FROM EXAM3_3;

-- EXAM3_4
SELECT * FROM EXAM3_4;
SELECT AVG(COL3) FROM EXAM3_4; -- 10
SELECT AVG(COL3) FROM EXAM3_4 WHERE COL1>0; -- 20
SELECT AVG(COL3) FROM EXAM3_4 WHERE COL1 IS NOT NULL; -- 20

-- EXAM3_5
SELECT * FROM EXAM3_5;
SELECT COUNT(GRADE) FROM EXAM3_5; -- 645
SELECT GRADE FROM EXAM3_5 WHERE GRADE IN('차장', '부장', '널'); -- 15
SELECT GRADE, COUNT(*) FROM EXAM3_5 GROUP BY GRADE; -- ALL

-- EXAM4_1
SELECT * FROM EXAM4_1;

SELECT ID FROM EXAM4_1
GROUP BY ID
HAVING COUNT(*) = 2
ORDER BY (CASE WHEN ID =999 THEN 0 ELSE ID END);


SELECT ID FROM EXAM4_1
GROUP BY ID
-- HAVING COUNT(*) = 2
ORDER BY (CASE WHEN ID =999 THEN 0 ELSE ID END);

-- EXAM4_2
SELECT * FROM EXAM4_2;

-- 1
SELECT 지역, SUM(매출금액) AS 매출금액
FROM EXAM4_2
GROUP BY 지역
ORDER BY 매출금액 DESC;

-- 2
SELECT 지역, 매출금액
FROM EXAM4_2
ORDER BY 년 DESC;

-- 3
SELECT 지역, 매출금액
FROM EXAM4_2
GROUP BY 지역
ORDER BY 년 DESC; -- ERROR

SELECT 지역, SUM(매출금액) AS 매출금액
FROM EXAM4_2
GROUP BY 지역
ORDER BY 매출금액 DESC;

-- 4
SELECT 지역, SUM(매출금액) AS 매출금액
FROM EXAM4_2
GROUP BY 지역
HAVING SUM(매출금액) >10000
ORDER BY COUNT(*) ASC;

-- EXAM4_4
SELECT * FROM EXAM4_4;

SELECT ID, AMT
FROM EXAM4_4
ORDER BY(
CASE 
    WHEN ID='A' THEN 1
    ELSE 2
    END),
AMT DESC;

SELECT ID, AMT
FROM EXAM4_4
ORDER BY(
CASE 
    WHEN ID='A' THEN 1
    ELSE 2
    END),
AMT;

-- EXAM5_1
CREATE TABLE EMP_10(A NUMBER(10));
CREATE TABLE 100-EMP(A NUMBER(10));
CREATE TABLE EMP-100(A NUMBER(10));
CREATE TABLE 100_EMP(A NUMBER(10));

-- EXAM5_2, 4, 9~11
CREATE TABLE 학생 (학번 CHAR(8) PRIMARY 
KEY, 장학금 INTEGER);

SELECT * FROM 학생;

INSERT INTO 학생 VALUES(1,10);
INSERT INTO 학생 VALUES(2,20);
INSERT INTO 학생 VALUES(3,30);
INSERT INTO 학생 VALUES(4,40);
INSERT INTO 학생 VALUES(5,50);
INSERT INTO 학생 VALUES(6,NULL);
INSERT INTO 학생 VALUES(NULL,70); -- PK X

SELECT COUNT(*) FROM 학생; -- 6
SELECT COUNT(학번) FROM 학생; -- 6
SELECT COUNT(장학금) FROM 학생; -- 5

SELECT * FROM 학생;
DELETE FROM 학생; -- 전부 삭제
DELETE FROM 학생 WHERE 장학금 = 10;
DELETE FROM 학생 WHERE 장학금 = NULL; -- 비교연산시 알 수 없음. 찾을게 없다.
DELETE FROM 학생 WHERE 장학금 IS NULL; 
DELETE FROM 학생 WHERE 장학금 IS NOT NULL; -- 장학금 IS NOT NULL

TRUNCATE TABLE 학생;
SELECT * FROM 학생;
DROP TABLE 학생;

ALTER TABLE 학생 DROP COLUMN 장학금;
ALTER TABLE 학생 DROP COLUMN 학생;

-- EXAM5_4
SELECT * FROM EXAM5_4;
ALTER TABLE EXAM5_4
DROP COLUMN COMM;

-- 5-5
CREATE TABLE 부서 ( 부서번호 CHAR(10), 부서명 
CHAR(10), PRIMARY KEY(부서번호));

CREATE TABLE 직원 ( 직원번호 CHAR(10), 소속부서 
CHAR(10), PRIMARY KEY(직원번호),
FOREIGN KEY(소속부서) REFERENCES 부서(부서번호) 
ON DELETE CASCADE);

SELECT * FROM 부서;
SELECT * FROM 직원;

INSERT INTO 부서 VALUES('10', '영업과');
INSERT INTO 부서 VALUES('20', '기획과');

INSERT INTO 직원 VALUES('1000', '10');
INSERT INTO 직원 VALUES('2000', '20');
INSERT INTO 직원 VALUES('3000', '20');
COMMIT;

SELECT COUNT(직원번호) FROM 직원; -- A -> 3
DELETE FROM 부서 WHERE 부서번호 = '20'; -- B
SELECT COUNT(직원번호) FROM 직원; -- C -> 1

-- 5-7
CREATE TABLE TBL
( ID NUMBER PRIMARY KEY, AMT NUMBER NOT NULL, DEGREE VARCHAR2(1)
);
SELECT * FROM TBL;
-- 1
INSERT INTO TBL VALUES(1,100); 
INSERT INTO TBL VALUES(1,100,'');

-- 2
INSERT INTO TBL(ID, AMT, DEGREE) VALUES(2, 200, 'AB');
INSERT INTO TBL(ID, AMT, DEGREE) VALUES(2, 200, 'A');

-- 3
INSERT INTO TBL(ID, DEGREE) VALUES(4, 'X');
INSERT INTO TBL(ID, AMT, DEGREE) VALUES(4, 100, 'X');

-- 4
INSERT INTO TBL(ID, AMT) VALUES(3, 300); 

-- 5
INSERT INTO TBL VALUES(5, 500, NULL); 

SELECT * FROM TBL;

-- 5-8
CREATE TABLE BOARD
(
BOARD_ID VARCHAR2(10) NOT NULL,
BOARD_NM VARCHAR2(50) NOT NULL,
USE_YM VARCHAR2(1) NOT NULL,
REG_DATE DATE NOT NULL,
BOARD_DESC VARCHAR2(100) NULL
);

SELECT * FROM BOARD;

-- 1
INSERT INTO BOARD VALUES(1, 'QA', 'Y', SYSDATE, 'QA 게시판'); 

-- 2
INSERT INTO BOARD (BOARD_ID, BOARD_NM, USE_YM, BOARD_DESC)
VALUES ('100', 'FAQ', 'Y', 'FAQ 게시판'); 

INSERT INTO BOARD (BOARD_ID, BOARD_NM, USE_YM, REG_DATE, BOARD_DESC)
VALUES ('100', 'FAQ', 'Y', SYSDATE, 'FAQ 게시판');

-- 3
UPDATE BOARD SET USE_YM = 'N' WHERE BOARD_ID='1'; 

-- 4
INSERT INTO BOARD VALUES(100, 'QA', 'Y', SYSDATE, 'QA 게시판');
UPDATE BOARD SET BOARD_ID=200 WHERE 
BOARD_ID='100'; 

-- EXAM6_2
-- SQLPLUS
-- C##SQLD
-- 1234

SELECT * FROM EXAM6_2;

UPDATE EXAM6_2 SET VAL=200 WHERE ID='001';
COMMIT; -- SERVER에 저장.
ROLLBACK;
INSERT INTO EXAM6_2 VALUES(3,300);
ROLLBACK;

INSERT INTO EXAM6_2 VALUES(3,300);
CREATE TABLE EXAM6_2_1(A NUMBER(10));
SELECT * FROM EXAM6_2_1;
ROLLBACK;

-- EXAM6_4
SELECT * FROM EXAM6_4;
INSERT INTO EXAM6_4(품목ID, 단가) VALUES('005',2000);
COMMIT;
DELETE EXAM6_4 WHERE 품목ID='002';
ROLLBACK;
SELECT COUNT(품목ID) FROM EXAM6_4 WHERE 단가=2000;

-- EXAM6_32
SELECT * FROM EXAM6_32;
UPDATE EXAM6_32 SET 상품명 = 'LCD-TV' WHERE 상품ID = '001';
SAVEPOINT SP1;
COMMIT;
UPDATE EXAM6_32 SET 상품명 = '평면-TV' WHERE 상품ID = '001';
ROLLBACK SP1;
ROLLBACK SAVEPOINT SP1;

