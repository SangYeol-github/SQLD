-- EXAM9_21
SELECT * FROM EXAM9_21;

SELECT COUNT(NVL(USERCOUNT,0)) FROM EXAM9_21;   --4
SELECT SUM(NVL(USERCOUNT,0))/4 FROM EXAM9_21;   --7.5
SELECT AVG(NVL(USERCOUNT,0)) FROM EXAM9_21;     --7.5
SELECT AVG(NVL(USERCOUNT,1))-0.5 FROM EXAM9_21; -- 7.5

-- EXAM9_23
SELECT * FROM EXAM9_23;

SELECT SUM(COL1+COL2+COL3+COL4)
FROM EXAM9_23;

SELECT SUM(COL1) + SUM(COL2) + SUM(COL3) + SUM(COL4)
FROM EXAM9_23;

-- EXAM9_25
SELECT * FROM EXAM9_25;

-- 1
SELECT SUM(price) AS TOTAL
FROM EXAM9_25 WHERE orderyear BETWEEN
'2020' AND '2021' AND ordermonth
BETWEEN '01' AND '12'; -- 15,500

-- 2
SELECT SUM(price) AS TOTAL
FROM EXAM9_25 WHERE ordermonth in('01','06'); -- 2500

-- 3
SELECT SUM(price) AS TOTAL
FROM EXAM9_25 WHERE ordermonth in('01', '06'); -- 2500

-- 4
SELECT SUM(decode('06', 0, price)) AS TOTAL
FROM EXAM9_25 WHERE orderyear BETWEEN
'2022' AND '2021'; -- null

-- EXAM9_29
SELECT * FROM EXAM9_29_1;
SELECT * FROM EXAM9_29_2;
INSERT INTO EXAM9_29_2 VALUES(NULL);

SELECT COUNT(*)
FROM EXAM9_29_1 A
WHERE A.COL NOT IN (SELECT COL
FROM EXAM9_29_2);


-- EXAM9_30
SELECT * FROM EXAM9_30;

SELECT * FROM EXAM9_30 WHERE COL1 IN(1,2,NULL);

-- EXAM9_31
SELECT * FROM EXAM9_31;

-- 1
SELECT * FROM EXAM9_31 WHERE USERNAME LIKE '%H';

-- 2
SELECT * FROM EXAM9_31 WHERE USERNAME LIKE '%#_%';

-- 3
SELECT * FROM EXAM9_31 WHERE USERNAME LIKE '%@_%' ESCAPE '@';

-- 4
SELECT * FROM EXAM9_31 WHERE USERNAME LIKE '%_%' ESCAPE '_';

-- EXAM9_34
SELECT * FROM EXAM9_34_1;

SELECT * FROM EXAM9_34_2;

SELECT A.JUMUN AS "주문", B.CUSTRANK AS "고객등급"
FROM (SELECT JUMUN, SUM(PRICE) AS TOTAL
FROM EXAM9_34_1
GROUP BY JUMUN)A, EXAM9_34_2 B
WHERE A.TOTAL BETWEEN B.MINPRICE AND
B.MAXPRICE;

-- 40
SELECT * FROM EMP;

-- 보기
SELECT JOB, COUNT(*) AS ROWCNT
FROM EMP
GROUP BY JOB;

-- 1
SELECT JOB, COUNT(*) AS ROWCNT
FROM EMP
GROUP BY JOB
ORDER BY JOB;

-- 2
SELECT JOB, COUNT(*) AS ROWCNT
FROM EMP
GROUP BY JOB
ORDER BY ROWCNT DESC;

-- 3
SELECT JOB, COUNT(*) AS ROWCNT
FROM EMP
GROUP BY JOB
ORDER BY COUNT(*);

-- 4
SELECT JOB, COUNT(*) AS ROWCNT
FROM EMP
GROUP BY JOB
ORDER BY 3; -- ERROR

SELECT JOB, COUNT(*) AS ROWCNT
FROM EMP
GROUP BY JOB
ORDER BY 2;

-- 42
SELECT * FROM EMP;
SELECT * FROM DEPT;

SELECT * FROM EMP CROSS JOIN DEPT;
SELECT * FROM EMP NATURAL JOIN DEPT;

SELECT * FROM EMP CROSS JOIN DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO;

SELECT * FROM EMP NATURAL JOIN DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO; -- ERROR

SELECT * FROM EMP JOIN DEPT
ON EMP.DEPTNO = DEPT.DEPTNO;

SELECT * FROM EMP JOIN DEPT
USING(DEPTNO);

-- EXAM9_44
SELECT * FROM EXAM9_44_1;
SELECT * FROM EXAM9_44_2;

SELECT b.grade, a.StudentNo, SUM(b.grade)
FROM EXAM9_44_1 a, EXAM9_44_2 b
GROUP BY
GROUPING SETS (b.grade, (b.grade, a.StudentNo));

SELECT b.grade, a.StudentNo, SUM(b.grade)
FROM EXAM9_44_1 a, EXAM9_44_2 b
GROUP BY ROLLUP(B.GRADE, A.STUDENTNO);

SELECT b.grade, a.StudentNo, SUM(b.grade)
FROM EXAM9_44_1 a, EXAM9_44_2 b
GROUP BY CUBE(B.GRADE, A.STUDENTNO);

-- EXAM9_45
SELECT * FROM EXAM9_45;

SELECT C1, C2
FROM EXAM9_45
ORDER BY C1, C2 DESC NULLS LAST;

SELECT C1, C2
FROM EXAM9_45
ORDER BY C1, C2 DESC;

-- EXAM9_46
SELECT * FROM EXAM9_46_1;
SELECT * FROM EXAM9_46_2;

SELECT * FROM EXAM9_46_1 LEFT OUTER JOIN EXAM9_46_2
ON EXAM9_46_1.COL1 = EXAM9_46_2.COL1;

SELECT * FROM EXAM9_46_1 RIGHT OUTER JOIN EXAM9_46_2
ON EXAM9_46_1.COL1 = EXAM9_46_2.COL1;

SELECT * FROM EXAM9_46_1 FULL OUTER JOIN EXAM9_46_2
ON EXAM9_46_1.COL1 = EXAM9_46_2.COL1;


-- 49
CREATE TABLE TEST49 (
    COL1 VARCHAR(10),
    COL2 VARCHAR(10),
    COL3 NUMBER(10)
);
INSERT INTO TEST49 VALUES('A','가',10);
INSERT INTO TEST49 VALUES('A','가',20);
INSERT INTO TEST49 VALUES('A','다',25);
INSERT INTO TEST49 VALUES('B','가',10);
INSERT INTO TEST49 VALUES('B','나',30);
INSERT INTO TEST49 VALUES('B','나',20);
INSERT INTO TEST49 VALUES('B','나',60);
INSERT INTO TEST49 VALUES('C','라',30);

SELECT * FROM TEST49;

SELECT NTILE_2, COUNT(*) AS ROWCNT
FROM (
SELECT COL1, COL2, COL3, NTILE(3) OVER
(ORDER BY COL3) AS NTILE_2
FROM TEST49)
GROUP BY NTILE_2;

-- EXAM9_50
SELECT * FROM EXAM9_50;

SELECT ENAME, SAL,
COUNT(*) OVER(ORDER BY SAL RANGE BETWEEN 50 PRECEDING AND 100 FOLLOWING)
AS SIM_CNT
FROM EXAM9_50;

SELECT ENAME, SAL,
COUNT(*) OVER(ORDER BY SAL RANGE BETWEEN 99 PRECEDING AND 199 FOLLOWING)
AS SIM_CNT
FROM EXAM9_50;

